use.miden::note
use.miden::contracts::wallets::basic->wallet
use.std::sys
use.miden::account
use.std::math::u64
use.miden::tx
use.std::crypto::hashes::rpo

# CONSTANTS
# =================================================================================================

const.PUBLIC_NOTE=1
const.EXECUTION_HINT_ALWAYS=1
const.FACTOR=0x000186A0 # 1e5
const.MAX_U32=0x0000000100000000

# Memory Addresses
# =================================================================================================

# Memory Address Layout:
# - SWAPP Note Inputs: General input addresses (0 - 0xD)
# - Reserved Input Memory Addresses: 0 to 40 (not explicitly listed)
# - Price Calculation Procedure: Addresses 41 to 60 (0x29 to 0x2D)
# - TokenId Addresses: Addresses 60 to 70 (0x2D to 0x30)
# - Boolean Addresses: Addresses 70 to 80 (0x35)
# - Full Word Addresses: Addresses 80 to 120, must be divisible by 4 (0x50 to 0x64)

# SWAPP Note Inputs (0 to 40)
const.REQUESTED_ASSET_WORD_INPUT = 0x0000
const.REQUESTED_ASSET_INPUT_1 = 0x0001
const.REQUESTED_ASSET_INPUT_2 = 0x0002
const.REQUESTED_ASSET_INPUT_3 = 0x0003
const.SWAPP_TAG_INPUT = 0x0004
const.P2ID_TAG_INPUT = 0x0005
const.EMPTY_INPUT_6 = 0x0006
const.EMPTY_INPUT_7 = 0x0007
const.SWAPP_COUNT_INPUT = 0x0008
const.EMPTY_INPUT_9 = 0x0009
const.EMPTY_INPUT_10 = 0x000A
const.EMPTY_INPUT_11 = 0x000B
const.SWAPP_CREATOR_PREFIX_INPUT = 0x000C
const.SWAPP_CREATOR_SUFFIX_INPUT = 0x000D

# RESERVED INPUT MEMORY ADDRESSES 0 to 40

# Memory Addresses for Price Calculation Procedure (41 to 60)
const.AMT_TOKENS_A = 0x0028
const.AMT_TOKENS_B = 0x0029
const.AMT_TOKENS_B_IN = 0x002A
const.AMT_TOKENS_A_OUT= 0x002B
const.RATIO = 0x002C

# TokenId Memory Addresses (60 to 70)
const.TOKEN_A_ID_PREFIX = 0x002D
const.TOKEN_A_ID_SUFFIX = 0x002E
const.TOKEN_B_ID_PREFIX = 0x002F
const.TOKEN_B_ID_SUFFIX = 0x0030

# Boolean Memory Addresses (70 to 80)
const.IS_PARTIAL_FILL = 0x0035

# Full Word Memory Addresses (80 to 120, must be divisible by 4)
const.SWAPP_SCRIPT_HASH_WORD = 0x0050
const.P2ID_SCRIPT_ROOT_WORD = 0x0054
const.SWAP_SERIAL_NUM_WORD = 0x0058
const.P2ID_SERIAL_NUM_WORD = 0x005C
const.P2ID_OUTPUT_RECIPIENT_WORD = 0x0060
const.OFFERED_ASSET_WORD = 0x0064

# Temporary Memory Addresses

const.NEW_ASSET_A = 0x0078

# ERRORS
# =================================================================================================

# SWAP script expects exactly 9 note inputs
const.ERR_SWAP_WRONG_NUMBER_OF_INPUTS="SWAPP wrong number of inputs"

# SWAP script requires exactly one note asset
const.ERR_SWAP_WRONG_NUMBER_OF_ASSETS="SWAPP wrong number of assets"

# SWAP amount must not exceed 184467440694145
const.ERR_INVALID_SWAP_AMOUNT="SWAPP invalid SWAP amount"

# SWAPp amount must not be 0
const.ERR_INVALID_SWAP_AMOUNT_ZERO="SWAPP zero SWAP amount"

# PRICE CALCULATION
# =================================================================================================

#! Returns the amount of tokens_a out given an amount of tokens_b
#!
#! Inputs: [tokens_a, tokens_b, tokens_b_in]
#! Outputs: [tokens_a_out]
#!
proc.calculate_tokens_a_for_b
    mem_store.AMT_TOKENS_A
    mem_store.AMT_TOKENS_B
    mem_store.AMT_TOKENS_B_IN

    mem_load.AMT_TOKENS_B mem_load.AMT_TOKENS_A

    gt
    if.true
        mem_load.AMT_TOKENS_B
        u32split

        push.FACTOR
        u32split

        exec.u64::wrapping_mul

        mem_load.AMT_TOKENS_A
        u32split

        exec.u64::div
        push.MAX_U32 mul add

        mem_store.RATIO

        mem_load.AMT_TOKENS_B_IN
        u32split

        push.FACTOR
        u32split

        exec.u64::wrapping_mul

        mem_load.RATIO
        u32split

        exec.u64::div
        push.MAX_U32 mul add

    else
        mem_load.AMT_TOKENS_A
        u32split

        push.FACTOR
        u32split

        exec.u64::wrapping_mul

        mem_load.AMT_TOKENS_B
        u32split

        exec.u64::div

        mem_load.AMT_TOKENS_B_IN
        u32split

        exec.u64::wrapping_mul

        push.FACTOR
        u32split

        exec.u64::div
        push.MAX_U32 mul add

    end
end

# HASHING PROCEDURES
# =================================================================================================

#! Returns the P2ID RECIPIENT for a specified SERIAL_NUM, SCRIPT_HASH, and account_id
#!
#! Inputs: [SERIAL_NUM, SCRIPT_HASH]
#! Outputs: [P2ID_RECIPIENT]
#!
proc.build_p2id_recipient_hash
    padw hmerge
    # => [SERIAL_NUM_HASH, SCRIPT_HASH]

    swapw hmerge
    # => [SERIAL_SCRIPT_HASH]

    padw
    mem_load.SWAPP_CREATOR_SUFFIX_INPUT mem_load.SWAPP_CREATOR_PREFIX_INPUT
    push.0.0

    push.4000 mem_storew dropw
    push.4004 mem_storew dropw

    push.8.4000
    # => [ptr, elements]

    exec.rpo::hash_memory
    # => [INPUTS_HASH, SERIAL_SCRIPT_HASH]

    hmerge
    # => [P2ID_RECIPIENT]
end

#! Returns the NOTE RECIPIENT for a specified SERIAL_NUM, SCRIPT_HASH, and INPUT_HASH
#!
#! Inputs: [SERIAL_NUM, SCRIPT_HASH, INPUT_HASH]
#! Outputs: [P2ID_RECIPIENT]
#!
proc.build_recipient_hash
    padw hmerge
    # => [SERIAL_NUM_HASH, SCRIPT_HASH, INPUT_HASH]

    swapw hmerge
    # => [SERIAL_SCRIPT_HASH, INPUT_HASH]

    swapw hmerge
    # => [P2ID_RECIPIENT]
end

# SWAP COUNT INCREMENT PROCEDURE
# =================================================================================================

#! Returns the incremented SWAP count value
#!
#! Inputs: []
#! Outputs: []
#!
proc.increment_swap_count
    mem_load.SWAPP_COUNT_INPUT
    push.1
    add
    mem_store.SWAPP_COUNT_INPUT
end

# input: [SERIAL_NUM, swap_count, ...]
# ouput: [P2ID_SERIAL_NUM, ...]
proc.get_p2id_serial_num
    swapw
    hmerge
end

# input: []
# output: [get_serial_number + 1]
proc.get_new_swap_serial_num
    exec.note::get_serial_number
    push.1
    add
end

#! Returns if the currently consuming account is the creator of the note
#!
#! Inputs: []
#! Outputs: [is_creator]
#!
proc.is_consumer_is_creator
    push.0 exec.note::get_inputs drop drop
    # => []

    exec.account::get_id
    # => [acct_id_prefix, acct_id_suffix]

    mem_load.SWAPP_CREATOR_SUFFIX_INPUT mem_load.SWAPP_CREATOR_PREFIX_INPUT
    # => [acct_id_prefix_input, acct_id_suffix_input, acct_id_prefix, acct_id_suffix]

    movup.2
    # => [acct_id_prefix, acct_id_prefix_input, acct_id_suffix_input, acct_id_suffix]

    eq
    # => [is_eq, acct_id_suffix_input, acct_id_suffix]

    if.true
        # => [acct_id_suffix_input, acct_id_suffix]
        eq
    else
        # => [acct_id_suffix_input, acct_id_suffix]
        drop drop push.0
    end
    # => [is_creator]
end

#! Sends Assets in Note to Consuming Account
#!
#! Inputs: []
#! Outputs: []
#!
proc.handle_reclaim
    push.0 exec.note::get_assets

    mem_loadw.0

    call.wallet::receive_asset

    dropw
end

# Partially Fillable Swap Script (SWAPp)
# =================================================================================================
#
# Partially Fillable Swap Script (SWAPp): adds an asset from the note into consumers account and
# creates a note consumable by note issuer containing requested ASSET.
#
# If the consuming account does not have sufficient liquidity to completely
# fill the amount of the SWAPp creator's requested asset, then the SWAPp note:
#  1) Computes the ratio of token_a to token_b, where token_a is the offered asset,
#     and where token_b is the requested asset
#  2) Calculates the amount of token_a to send to the consumer based on the the
#     amount of token_b sent via P2ID to the creator
#  3) Outputs a new SWAPp note with the remaining liquidity of token_a, and the updated
#     amount of token_b
#
# If the consuming account completely fills the amount requested by the SWAPp creator,
# only a single P2ID note is outputted.
#
# Definitions:
# 1) the offered asset is referred to as token_a,
# 2) the requested asset is referred to as token_b,
# 3) token_b_in is the amount of token_b sent to the SWAPp creator via P2ID from the consuming account
# 4) token_a_out is the amount of token_a sent to the consuming account
#

# => []
proc.execute_SWAPp
    push.OFFERED_ASSET_WORD exec.note::get_assets assert.err=ERR_SWAP_WRONG_NUMBER_OF_ASSETS drop
    # => []

    mem_loadw.OFFERED_ASSET_WORD
    # => [OFFERED_ASSET]

    mem_store.TOKEN_A_ID_PREFIX
    # => [offered_asset_id_suffix, 0, token_a_AMT]

    mem_store.TOKEN_A_ID_SUFFIX
    # => [0, token_a_AMT]

    drop
    # => [token_a_AMT]

    # store token_a_AMT to mem
    mem_store.AMT_TOKENS_A
    # => []

    # store note inputs into memory starting at address 0
    push.0 exec.note::get_inputs
    # => [num_inputs, inputs_ptr]

    # make sure the number of inputs is N
    eq.14 assert.err=ERR_SWAP_WRONG_NUMBER_OF_INPUTS
    # => [inputs_ptr]

    mem_loadw.REQUESTED_ASSET_WORD_INPUT
    # => [REQUESTED_ASSET]

    mem_store.TOKEN_B_ID_PREFIX
    # => [token_b_suffix, 0, AMT_TOKENS_B]

    mem_store.TOKEN_B_ID_SUFFIX drop
    # => [AMT_TOKENS_B]

    # store token_b_AMT to mem
    mem_store.AMT_TOKENS_B
    # => []

    # Users can supply the amount of token B they would like to sell
    # via note args. If they don't supply AMT_TOKENS_B_IN via note args
    # by default we read the balance of token B in the consuming account

    # get token_b_AMT_IN, if supplied via note args
    mem_load.AMT_TOKENS_B_IN push.0
    eq
    # => [is_AMT_TOKENS_B_IN_USER_BAL]

    # if amount to swap is user wallet balance
    if.true
        mem_load.TOKEN_B_ID_SUFFIX mem_load.TOKEN_B_ID_PREFIX
        # => [token_b_id_prefix, token_b_id_suffix]

        call.account::get_balance
        # => [token_b_AMT_IN]

        # token_b_AMT_IN must not be 0
        dup push.0 neq assert.err=ERR_INVALID_SWAP_AMOUNT_ZERO
        # => [token_b_AMT_IN]

        mem_store.AMT_TOKENS_B_IN
        # => []
    else
        # no need to verify that amount tokens b via note args is
        # valid bc if it isn't call.wallet::send_asset will fail
    end
    # = []

    mem_load.AMT_TOKENS_B_IN
    # => [token_b_AMT_IN]

    mem_load.AMT_TOKENS_B mem_load.AMT_TOKENS_A
    # => [token_a_AMT, token_b_AMT, token_b_AMT_IN]

    exec.calculate_tokens_a_for_b
    # => [token_a_AMT_out]

    # store token_a_AMT_out in mem
    dup mem_store.AMT_TOKENS_A_OUT
    # => [token_a_AMT_out]

    mem_load.AMT_TOKENS_A
    # => [token_a_AMT, token_a_AMT_out]

    lt
    # => [is_lt]

    # if amount_out < amount_a
    if.true
        # partial order fill
        # mem_load.AMT_TOKENS_A_OUT
        push.1 mem_store.IS_PARTIAL_FILL
    else
        # complete order fill
        # mem_load.AMT_TOKENS_A
        push.0 mem_store.IS_PARTIAL_FILL
    end
    # => []

    # 1) send token_b_in amt in to creator
    # 2) send token_a_out amt to consumer

    # If Partial Fill:
    # 3) create SWAPp' and calculate token_a' & token_b'
    # 4) add token_a' and token_b' to SWAPp'

    padw mem_loadw.P2ID_SCRIPT_ROOT_WORD
    # => [P2ID_SCRIPT_HASH]

    exec.increment_swap_count
    # => [P2ID_SCRIPT_HASH]

    padw mem_loadw.SWAPP_COUNT_INPUT
    # => [SWAP_COUNT, P2ID_SCRIPT_HASH]

    exec.note::get_serial_number
    # => [SWAP_SERIAL_NUM, SWAP_COUNT, P2ID_SCRIPT_HASH]

    exec.get_p2id_serial_num
    # => [P2ID_SERIAL_NUM, P2ID_SCRIPT_HASH]

    exec.build_p2id_recipient_hash
    # => [P2ID_RECIPIENT]

    push.EXECUTION_HINT_ALWAYS
    # => [execution_hint_always, P2ID_RECIPIENT]

    push.PUBLIC_NOTE
    # => [public_note, execution_hint_always, P2ID_RECIPIENT]

    push.0 # @dev aux for p2id output note
    # => [aux, public_note, execution_hint_always, P2ID_RECIPIENT]

    mem_load.P2ID_TAG_INPUT
    # => [tag, aux, public_note, execution_hint_always, P2ID_RECIPIENT]
    # => [tag, aux, note_type, execution_hint, RECIPIENT]

    call.tx::create_note
    # => [note_idx, pad(15) ...]

    mem_load.AMT_TOKENS_B_IN
    push.0
    mem_load.TOKEN_B_ID_SUFFIX
    mem_load.TOKEN_B_ID_PREFIX
    # => [ASSET, note_idx]

    call.wallet::move_asset_to_note
    # => [ASSET, note_idx, pad(11)]

    dropw drop
    # => []

    mem_load.AMT_TOKENS_A_OUT
    push.0
    mem_load.TOKEN_A_ID_SUFFIX
    mem_load.TOKEN_A_ID_PREFIX
    # => [ASSET]

    call.wallet::receive_asset
    # => []

    # check if partial fill
    mem_load.IS_PARTIAL_FILL
    # => [is_partial_fill]

    if.true
        mem_load.AMT_TOKENS_B mem_load.AMT_TOKENS_B_IN sub
        # => [token_b_AMT']

        push.0
        mem_load.TOKEN_B_ID_SUFFIX
        mem_load.TOKEN_B_ID_PREFIX
        # => [REQUESTED_ASSET_REMAINING]

        # overwrite memory!
        mem_storew.REQUESTED_ASSET_WORD_INPUT dropw
        # => []

        push.16.0
        # => [inputs, ptr]

        exec.rpo::hash_memory
        # => [INPUTS_HASH]

        exec.note::get_script_root
        # => [SCRIPT_HASH, INPUTS_HASH]

        exec.get_new_swap_serial_num
        # => [SERIAL_NUM, SCRIPT_HASH, INPUTS_HASH]

        exec.tx::build_recipient_hash
        # => [RECIPIENT_SWAPP]

        push.EXECUTION_HINT_ALWAYS
        # => [execution_hint_always, SWAPp_RECIPIENT]

        push.PUBLIC_NOTE
        # => [public_note, execution_hint_always, SWAPp_RECIPIENT]

        push.0 # @dev empty aux
        # => [aux, public_note, execution_hint_always, SWAPp_RECIPIENT]

        mem_load.SWAPP_TAG_INPUT
        # => [aux, public_note, execution_hint_always, SWAPp_RECIPIENT]

        mem_load.AMT_TOKENS_A mem_load.AMT_TOKENS_A_OUT sub
        # => [token_a_amt', aux, public_note, execution_hint_always, SWAPp_RECIPIENT]

        push.0
        mem_load.TOKEN_A_ID_SUFFIX
        mem_load.TOKEN_A_ID_PREFIX
        # => [ASSET, payback_tag, aux, note_type, SWAPp_RECIPIENT]

        dupw call.wallet::receive_asset
        # => [ASSET, payback_tag, aux, note_type, SWAPp_RECIPIENT]

        mem_storew.NEW_ASSET_A dropw
        # => [payback_tag, aux, note_type, SWAPp_RECIPIENT]
        # => [tag, aux, note_type, execution_hint, RECIPIENT]

        # SWAPp' creation
        call.tx::create_note
        # => [note_idx, pad(15) ...]

        padw
        # => [EMPTY_WORD, note_idx, pad(15) ...]

        mem_loadw.NEW_ASSET_A
        # => [ASSET, note_idx, pad(15) ...]

        call.wallet::move_asset_to_note
        # => [ASSET, note_idx, pad(11)]

        dropw drop
        # => []

    else
        # do not output SWAPp'
        # P2ID already created
        nop
    end

    # clean stack
    exec.sys::truncate_stack
end

begin
    # => [NOTE_ARGS]

    # can provide amount B in as note args
    mem_store.AMT_TOKENS_B_IN drop drop drop
    # => []

    push.14355791738953101471.16880376862595469307.4399717636953729920.18023939233288492685
    mem_storew.P2ID_SCRIPT_ROOT_WORD dropw
    # => []

    exec.is_consumer_is_creator
    # => [is_creator]

    if.true
        exec.handle_reclaim
    else
        exec.execute_SWAPp
    end

end
